<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.eclipse.ee4j</groupId>
    <artifactId>cargo-tracker</artifactId>
    <version>3.2-SNAPSHOT</version>
    <packaging>war</packaging>
    <name>Eclipse Cargo Tracker</name>
    <description>The project demonstrates how you can develop applications with the Jakarta EE platform using widely adopted architectural best practices like Domain-Driven Design (DDD).</description>
    <url>https://eclipse-ee4j.github.io/cargotracker/</url>
    <organization>
        <name>Eclipse Foundation</name>
        <url>https://www.eclipse.org/org/foundation/</url>
    </organization>
    <issueManagement>
        <system>github</system>
        <url>https://github.com/eclipse-ee4j/cargotracker/issues</url>
    </issueManagement>
    <properties>
        <jakartaee-api.version>10.0.0</jakartaee-api.version>
        <arquillian-bom.version>1.6.0.Final</arquillian-bom.version>
        <maven.compiler.release>17</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.report.sourceEncoding>UTF-8</project.report.sourceEncoding>

        <!-- Test Utilities -->
        <arquilian.version>1.8.0.Final</arquilian.version>
        <assertj.version>3.18.1</assertj.version>
        <hamcrest.version>2.2</hamcrest.version>
        <initial.data.sql>initital-data.sql</initial.data.sql>
        <jta.data.source>java:app/jdbc/CargoTrackerDatabase</jta.data.source>
        <junit.version>5.10.0</junit.version>
        <project.build.time>${maven.build.timestamp}</project.build.time>
    </properties>
    <dependencyManagement>
        <dependencies>
            <!-- Arquillian Bill Of Management used to reduce collision between testing
                 dependencies. Using a dependency manager we don't need to specify the version of
                 each Arquillian dependency. -->
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${arquillian-bom.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>jakarta.platform</groupId>
                <artifactId>jakarta.jakartaee-api</artifactId>
                <version>${jakartaee-api.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest</artifactId>
                <version>${hamcrest.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <version>${jakartaee-api.version}</version>
            <scope>provided</scope>
        </dependency>
        <!-- The third-party dependencies this application has -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.primefaces</groupId>
            <artifactId>primefaces</artifactId>
            <version>13.0.4</version>
            <classifier>jakarta</classifier>
        </dependency>
        <!-- Test dependencies -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <version>2.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.24.2</version>
            <scope>test</scope>
        </dependency>
        <!-- Arquillian dependencies -->
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-container</artifactId>
            <version>${arquilian.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Resolvers are needed in the Arquillian tests. This is used for adding all
             the runtime dependencies inside a testing war. -->
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
            <version>3.1.4</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet-jakarta</artifactId>
            <version>${arquilian.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Needed for Arquillian to log -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <finalName>cargo-tracker</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
    </build>
    <profiles>
        <!-- The currently supported application servers are represented as profiles -->
        <profile>
            <id>payara</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <payara.version>6.2023.12</payara.version>
                <!-- Application properties -->
                <webapp.graphTraversalUrl>http://localhost:8080/cargo-tracker/rest/graph-traversal/shortest-path</webapp.graphTraversalUrl>
                <db.driverClass>org.h2.jdbcx.JdbcDataSource</db.driverClass>
                <!-- H2 file engine requires an absolute path, eg. ~/name, ./name or a full-qualified 
                     path name (it should include driver name under Windows). -->
                <db.jdbcUrl>jdbc:h2:file:./cargo-tracker-data/cargo-tracker-database</db.jdbcUrl>
                <db.user />
                <db.password />
            </properties>
            <dependencies>
                <!-- We need a Jersey specific dependency for property name constants -->
                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-server</artifactId>
                    <version>3.1.2</version>
                    <scope>provided</scope>
                </dependency>
                <!-- Embedding the JDBC driver in the WAR works in Payara -->
                <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                    <version>2.2.220</version>
                    <scope>runtime</scope>
                </dependency>
                <dependency>
                    <groupId>fish.payara.extras</groupId>
                    <artifactId>payara-micro</artifactId>
                    <version>${payara.version}</version>
                    <scope>test</scope>
                </dependency>
                <!-- Payara Micro Managed Container Adapter -->
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-micro-managed</artifactId>
                    <version>3.0.alpha8</version>
                    <scope>test</scope>
                </dependency>
                <!-- Needed at the moment for Jakarta EE 10 support -->
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>payara-client-ee9</artifactId>
                    <version>3.0.alpha8</version>
                    <scope>test</scope>
                </dependency>        
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.1.2</version>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven3-plugin</artifactId>
                        <version>1.10.9</version>
                        <configuration>
                            <container>
                                <containerId>payara</containerId>
                                <artifactInstaller>
                                    <groupId>fish.payara.distributions</groupId>
                                    <artifactId>payara</artifactId>
                                    <version>${payara.version}</version>
                                </artifactInstaller>
                                <timeout>180000</timeout>
                            </container>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>glassfish</id>
            <properties>
                <glassfish.version>7.0.8</glassfish.version>
                <!-- Application properties -->
                <webapp.graphTraversalUrl>http://localhost:8080/cargo-tracker/rest/graph-traversal/shortest-path</webapp.graphTraversalUrl>
                <db.driverClass>org.h2.jdbcx.JdbcDataSource</db.driverClass>
                <!-- H2 file engine requires an absolute path, eg. ~/name, ./name or a full-qualified
                     path name (it should include driver name under Windows). -->
                <db.jdbcUrl>jdbc:h2:file:./cargo-tracker-data/cargo-tracker-database</db.jdbcUrl>
                <db.user />
                <db.password />
            </properties>
            <dependencies>
                <!-- We need a Jersey specific dependency for property name constants -->
                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-server</artifactId>
                    <version>3.1.2</version>
                    <scope>provided</scope>
                </dependency>
                <!-- Embedding the JDBC driver in the WAR works in GlassFish -->
                <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                    <version>2.1.214</version>
                    <scope>runtime</scope>
                </dependency>

                <!-- The Arquillian connector for GlassFish. This lets Arquillian
                     start and stop GlassFish, and deploy and undeploy war files to it. -->
                <dependency>
                    <groupId>org.jboss.arquillian.container</groupId>
                    <artifactId>arquillian-glassfish-managed-6</artifactId>
                    <version>1.0.0.Alpha1</version>
                    <scope>test</scope>
                </dependency>
                <!-- This dependency is required to replace a milestone dependency of
                     arquillian-glassfish-managed-6 which isn't deployed in Maven Central -->
                <dependency>
                    <groupId>org.glassfish.jersey.inject</groupId>
                    <artifactId>jersey-hk2</artifactId>
                    <version>3.1.3</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.1.2</version>
                        <configuration>
                            <systemPropertyVariables>
                                <arquillian.launch>glassfish</arquillian.launch>
                            </systemPropertyVariables>
                            <environmentVariables>
                                <GLASSFISH_HOME>${project.build.directory}/glassfish7</GLASSFISH_HOME>
                            </environmentVariables>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven3-plugin</artifactId>
                        <version>1.10.9</version>
                        <configuration>
                            <container>
                                <containerId>glassfish7x</containerId>
                                <artifactInstaller>
                                    <groupId>org.glassfish.main.distributions</groupId>
                                    <artifactId>glassfish</artifactId>
                                    <version>${glassfish.version}</version>
                                </artifactInstaller>
                                <timeout>180000</timeout>
                            </container>
                        </configuration>
                    </plugin>
                    <!-- This installs GlassFish into the build directory so that it's used in tests -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.6.0</version>
                        <executions>
                            <execution>
                                <id>unpack</id>
                                <phase>process-test-classes</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.glassfish.main.distributions</groupId>
                                            <artifactId>glassfish</artifactId>
                                            <version>${glassfish.version}</version>
                                            <type>zip</type>
                                            <overWrite>false</overWrite>
                                            <outputDirectory>${project.build.directory}</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- This modifies configuration of GlassFish for tests - changes the HTTP port to 9090 -->
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <phase>process-test-classes</phase>
                                <configuration>
                                    <target>
                                        <replace file="${project.build.directory}/glassfish7/glassfish/domains/domain1/config/domain.xml" token="&quot;8080&quot;" value="&quot;9090&quot;"/>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Cloud/production deployment using Payara and PostgreSQL. -->
        <profile>
            <id>cloud</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <payara.version>6.2023.12</payara.version>
                <webapp.graphTraversalUrl>http://localhost:8080/rest/graph-traversal/shortest-path</webapp.graphTraversalUrl>
                <db.driverClass>org.postgresql.ds.PGPoolingDataSource</db.driverClass>
                <!-- Pass in via command line. For example:
                     mvn clean package -Pcloud -DpostgreSqlJdbcUrl="jdbc:postgresql://host.docker.internal:5432/postgres" -DpostgreSqlUsername="postgres" -DpostgreSqlPassword="postgres" 
                -->
                <db.jdbcUrl>${postgreSqlJdbcUrl}</db.jdbcUrl>
                <db.user>${postgreSqlUsername}</db.user>
                <db.password>${postgreSqlPassword}</db.password>
            </properties>
            <dependencies>
                <!-- We need a Jersey specific dependency -->
                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-server</artifactId>
                    <version>3.1.2</version>
                    <scope>provided</scope>
                </dependency>
                <!-- Embedding the JDBC driver in the WAR works in Payara Micro -->
                <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                    <version>2.2.220</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>fish.payara.extras</groupId>
                    <artifactId>payara-micro</artifactId>
                    <version>${payara.version}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>arquillian-payara-micro-managed</artifactId>
                    <version>3.0.alpha8</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>fish.payara.arquillian</groupId>
                    <artifactId>payara-client-ee9</artifactId>
                    <version>3.0.alpha8</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.6.0</version>
                        <executions>
                            <execution>
                                <id>copy</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.postgresql</groupId>
                                    <artifactId>postgresql</artifactId>
                                    <version>42.6.0</version>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                    <destFileName>postgresql.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.1.2</version>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>openliberty</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
                <db.driverClass>org.hsqldb.jdbc.JDBCDriver</db.driverClass>
                <db.jdbcUrl>jdbc:hsqldb:file:./cargo-tracker-data/cargo-tracker-database;create=true</db.jdbcUrl>
            </properties>
            <dependencies>
                <!-- Provided dependencies -->
                <dependency>
                    <groupId>org.hsqldb</groupId>
                    <artifactId>hsqldb</artifactId>
                    <version>2.7.2</version>
                    <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.core</groupId>
                    <artifactId>jersey-server</artifactId>
                    <version>3.1.2</version>
                    <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>io.openliberty.arquillian</groupId>
                    <artifactId>arquillian-liberty-managed-jakarta-junit5</artifactId>
                    <version>2.1.4</version>
                    <type>pom</type>
                    <scope>test</scope>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <!-- Enable liberty-maven plugin -->
                    <plugin>
                        <groupId>io.openliberty.tools</groupId>
                        <artifactId>liberty-maven-plugin</artifactId>
                        <version>3.8.2</version>
                        <configuration>
                            <copyDependencies>
                                <dependencyGroup>
                                    <location>${project.build.directory}/liberty/wlp/usr/shared/resources</location>
                                    <dependency>
                                        <groupId>org.hsqldb</groupId>
                                        <artifactId>hsqldb</artifactId>
                                    </dependency>
                                </dependencyGroup>
                            </copyDependencies>
                        </configuration>
                        <executions>
                            <execution>
                                <id>install-liberty</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>create</goal>
                                    <goal>install-feature</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.1.2</version>
                        <configuration>
                            <systemPropertyVariables>
                                <arquillian.launch>openliberty</arquillian.launch>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- OpenLiberty on Aks Profile -->
        <profile>
            <id>openLibertyOnAks</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <webapp.graphTraversalUrl>http://localhost:9080/rest/graph-traversal/shortest-path</webapp.graphTraversalUrl>
                <jta.data.source>jdbc/CargoTrackerDB</jta.data.source>
                <initial.data.sql>postgresql-initital-data.sql</initial.data.sql>
                <project.build.time>${maven.build.timestamp}</project.build.time>
                <maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss</maven.build.timestamp.format>
                <param.login.server>${env.LOGIN_SERVER}</param.login.server>
                <param.db.server.name>${env.DB_SERVER_NAME}</param.db.server.name>
                <param.db.port.number>${env.DB_PORT_NUMBER}</param.db.port.number>
                <param.db.name>${env.DB_NAME}</param.db.name>
                <param.db.user>${env.DB_USER}</param.db.user>
                <param.db.password>${env.DB_PASSWORD}</param.db.password>
                <param.namespace>${env.NAMESPACE}</param.namespace>
                <param.replicas>3</param.replicas>
                <param.app.insight.connection.string>${env.APPLICATIONINSIGHTS_CONNECTION_STRING}</param.app.insight.connection.string>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>jakarta.ws.rs</groupId>
                    <artifactId>jakarta.ws.rs-api</artifactId>
                    <version>3.1.0</version>
                </dependency>
                <dependency>
                    <groupId>jakarta.json</groupId>
                    <artifactId>jakarta.json-api</artifactId>
                    <version>2.1.3</version>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-sse</artifactId>
                    <version>3.1.6</version>
                </dependency>
            </dependencies>
            <build>
                <resources>
                    <resource>
                        <directory>src/main/resources</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
                <testResources>
                    <testResource>
                        <directory>src/test/resources</directory>
                        <filtering>true</filtering>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <version>3.4.0</version>
                        <configuration>
                            <failOnMissingWebXml>false</failOnMissingWebXml>
                            <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
                            <webXml>${basedir}/src/main/webapp/WEB-INF/web.xml</webXml>
                        </configuration>
                    </plugin>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.1.2</version>
                        <configuration>
                            <skipTests>true</skipTests>
                            <systemPropertyVariables>
                                <!-- This is needed to tell the unit tests which profile
                                     we are running. -->
                                <profileId>${project.activeProfiles[0].id}</profileId>
                                <!-- This is needed to tell Arquillian which profile
                                     we are running. -->
                                <arquillian.launch>${project.activeProfiles[0].id}</arquillian.launch>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.6.0</version>
                        <executions>
                            <execution>
                                <id>copy</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.postgresql</groupId>
                                    <artifactId>postgresql</artifactId>
                                    <version>42.7.3</version>
                                    <type>jar</type>
                                    <outputDirectory>${project.build.directory}/liberty/wlp/usr/shared/resources</outputDirectory>
                                    <destFileName>postgresql.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.microsoft.azure</groupId>
                                    <artifactId>applicationinsights-agent</artifactId>
                                    <version>3.4.11</version>
                                    <type>jar</type>
                                    <outputDirectory>src/main/liberty/config</outputDirectory>
                                    <destFileName>applicationinsights-agent.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>io.openliberty.tools</groupId>
                        <artifactId>liberty-maven-plugin</artifactId>
                        <version>3.10</version>
                        <executions>
                            <execution>
                                <id>package-server</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>create</goal>
                                    <goal>install-feature</goal>
                                    <goal>deploy</goal>
                                </goals>
                                <configuration>
                                    <libertyRuntimeVersion>23.0.0.3</libertyRuntimeVersion>
                                    <outputDirectory>${project.build.directory}/wlp-package</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.3.1</version>
                        <executions>
                            <execution>
                                <id>01-dockerfile</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>src/main/liberty/docker</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>02-aks-config</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>src/main/liberty/aks</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>server-xml</id>
            <properties>
                <db.server.name>${env.DB_SERVER_NAME}</db.server.name>
                <db.port.number>${env.DB_PORT_NUMBER}</db.port.number>
                <db.name>${env.DB_NAME}</db.name>
                <db.user>${env.DB_USER}</db.user>
                <db.password>${env.DB_PASSWORD}</db.password>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.3.1</version>
                        <executions>
                            <execution>
                                <id>server-xml</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/liberty/wlp/usr/servers/defaultServer</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>src/main/liberty/config</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>          
    </profiles>
</project>
