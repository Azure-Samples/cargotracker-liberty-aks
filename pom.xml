<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://maven.apache.org/POM/4.0.0"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.eclipse.ee4j</groupId>
    <artifactId>cargo-tracker</artifactId>
    <version>2.1</version>
    <packaging>war</packaging>
    <name>Eclipse Cargo Tracker</name>
    <description>
        The project demonstrates how you can develop applications with the Jakarta EE platform using
        widely adopted architectural best practices like Domain-Driven Design (DDD).   
    </description>
    <url>https://eclipse-ee4j.github.io/cargotracker/</url>

    <organization>
        <name>Eclipse Foundation</name>
        <url>https://www.eclipse.org/org/foundation/</url>
    </organization>

    <issueManagement>
        <system>github</system>
        <url>https://github.com/eclipse-ee4j/cargotracker/issues</url>
    </issueManagement>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.report.sourceEncoding>UTF-8</project.report.sourceEncoding>

        <maven.compiler.release>21</maven.compiler.release>

        <jakartaee-api.version>8.0.0</jakartaee-api.version>

        <arquillian-bom.version>1.6.0.Final</arquillian-bom.version>

        <!-- Test Utilities -->
        <junit.version>4.13.1</junit.version>
        <hamcrest.version>2.2</hamcrest.version>
        <assertj.version>3.18.1</assertj.version>
        <project.build.time>${maven.build.timestamp}</project.build.time>

        <jta.data.source>java:app/jdbc/CargoTrackerDatabase</jta.data.source>
        <initial.data.sql>initital-data.sql</initial.data.sql>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>jakarta.platform</groupId>
                <artifactId>jakarta.jakartaee-api</artifactId>
                <version>${jakartaee-api.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- Arquillian Bill Of Management used to reduce collision between testing dependencies. 
                Using a dependency manager we don't need to specify the version of each Arquillian dependency. -->
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${arquillian-bom.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>

            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest</artifactId>
                <version>${hamcrest.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
        </dependency>

        <!-- Required by Java SE 9+ -->
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>2.3.3</version>
            <scope>provided</scope>
        </dependency>

        <!-- The third-party dependencies this application has -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.primefaces</groupId>
            <artifactId>primefaces</artifactId>
            <version>8.0</version>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Arquillian dependencies -->
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Resolvers are needed in the Arquillian tests. This is used for adding all the runtime dependencies 
            inside a testing war. -->
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Needed for Arquillian to log -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>cargo-tracker</finalName>
        <resources>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
        <testResources>
          <testResource>
            <directory>src/test/resources</directory>
            <filtering>true</filtering>
          </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.3.1</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <!-- OpenLiberty on Aks Profile -->
        <profile>
            <id>openLibertyOnAks</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <webapp.graphTraversalUrl>http://localhost:9080/rest/graph-traversal/shortest-path</webapp.graphTraversalUrl>
                <jta.data.source>jdbc/CargoTrackerDB</jta.data.source>
                <initial.data.sql>postgresql-initital-data.sql</initial.data.sql>
                <project.build.time>${maven.build.timestamp}</project.build.time>
                <maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss</maven.build.timestamp.format>
                <param.login.server>${env.LOGIN_SERVER}</param.login.server>
                <param.db.server.name>${env.DB_SERVER_NAME}</param.db.server.name>
                <param.db.port.number>${env.DB_PORT_NUMBER}</param.db.port.number>
                <param.db.name>${env.DB_NAME}</param.db.name>
                <param.db.user>${env.DB_USER}</param.db.user>
                <param.db.password>${env.DB_PASSWORD}</param.db.password>
                <param.namespace>${env.NAMESPACE}</param.namespace>
                <param.replicas>3</param.replicas>
                <param.app.insight.connection.string>${env.APPLICATIONINSIGHTS_CONNECTION_STRING}</param.app.insight.connection.string>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>javax.ws.rs</groupId>
                    <artifactId>javax.ws.rs-api</artifactId>
                    <version>2.1</version>
                    <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>javax.json</groupId>
                    <artifactId>javax.json-api</artifactId>
                    <version>1.0</version>
                    <scope>provided</scope>
                </dependency>
                <dependency>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-sse</artifactId>
                    <version>3.0.3</version>
                </dependency>
            </dependencies>
            <build>
                <resources>
                    <resource>
                        <directory>src/main/resources</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
                <testResources>
                    <testResource>
                        <directory>src/test/resources</directory>
                        <filtering>true</filtering>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <version>3.3.2</version>
                        <configuration>
                            <failOnMissingWebXml>false</failOnMissingWebXml>
                            <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
                            <webXml>${basedir}/src/main/webapp/WEB-INF/web.xml</webXml>
                        </configuration>
                    </plugin>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.22.2</version>
                        <configuration>
                            <skipTests>true</skipTests>
                            <systemPropertyVariables>
                                <!-- This is needed to tell the unit tests which profile
                                we are running. -->
                                <profileId>${project.activeProfiles[0].id}</profileId>
                                <!-- This is needed to tell Arquillian which profile
                                we are running. -->
                                <arquillian.launch>${project.activeProfiles[0].id}</arquillian.launch>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.1.2</version>
                        <executions>
                            <execution>
                                <id>copy</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.postgresql</groupId>
                                    <artifactId>postgresql</artifactId>
                                    <version>42.3.8</version>
                                    <type>jar</type>
                                    <outputDirectory>${project.build.directory}/liberty/wlp/usr/shared/resources</outputDirectory>
                                    <destFileName>postgresql.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>com.microsoft.azure</groupId>
                                    <artifactId>applicationinsights-agent</artifactId>
                                    <version>3.4.11</version>
                                    <type>jar</type>
                                    <outputDirectory>src/main/liberty/config</outputDirectory>
                                    <destFileName>applicationinsights-agent.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>io.openliberty.tools</groupId>
                        <artifactId>liberty-maven-plugin</artifactId>
                        <version>3.6.1</version>
                        <executions>
                            <execution>
                                <id>package-server</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>create</goal>
                                    <goal>install-feature</goal>
                                    <goal>deploy</goal>
                                </goals>
                                <configuration>
                                    <libertyRuntimeVersion>[20.0.0.1,)</libertyRuntimeVersion>
                                    <outputDirectory>${project.build.directory}/wlp-package</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.2.0</version>
                        <executions>
                            <execution>
                                <id>01-dockerfile</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>src/main/liberty/docker</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>02-aks-config</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>src/main/liberty/aks</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
          <id>server-xml</id>
          <properties>
              <db.server.name>${env.DB_SERVER_NAME}</db.server.name>
              <db.port.number>${env.DB_PORT_NUMBER}</db.port.number>
              <db.name>${env.DB_NAME}</db.name>
              <db.user>${env.DB_USER}</db.user>
              <db.password>${env.DB_PASSWORD}</db.password>
          </properties>
          <build>
            <plugins>
              <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                  <execution>
                    <id>server-xml</id>
                    <phase>validate</phase>
                    <goals>
                      <goal>copy-resources</goal>
                    </goals>
                    <configuration>
                      <outputDirectory>${project.build.directory}/liberty/wlp/usr/servers/defaultServer</outputDirectory>
                      <resources>
                        <resource>
                          <directory>src/main/liberty/config</directory>
                          <filtering>true</filtering>
                        </resource>
                      </resources>
                    </configuration>
                  </execution>
                </executions>
              </plugin>
            </plugins>
          </build>
        </profile>          
    </profiles>
</project>
